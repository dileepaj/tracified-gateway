// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package TracifiedNFT

// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// TracifiedNFTMetaData contains all meta data concerning the TracifiedNFT contract.
var TracifiedNFTMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenDetail\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenRecived\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"}],\"name\":\"mintNFT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506040518060400160405280600981526020017f54726163696669656400000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f4e46540000000000000000000000000000000000000000000000000000000000815250816000908051906020019062000096929190620001a6565b508060019080519060200190620000af929190620001a6565b505050620000d2620000c6620000d860201b60201c565b620000e060201b60201c565b620002bb565b600033905090565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b828054620001b49062000285565b90600052602060002090601f016020900481019282620001d8576000855562000224565b82601f10620001f357805160ff191683800117855562000224565b8280016001018555821562000224579182015b828111156200022357825182559160200191906001019062000206565b5b50905062000233919062000237565b5090565b5b808211156200025257600081600090555060010162000238565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200029e57607f821691505b60208210811415620002b557620002b462000256565b5b50919050565b6130fd80620002cb6000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c8063715018a6116100ad578063c0bcc07a11610071578063c0bcc07a146102f4578063c87b56dd14610326578063e985e9c514610356578063eacabe1414610386578063f2fde38b146103b657610121565b8063715018a6146102765780638da5cb5b1461028057806395d89b411461029e578063a22cb465146102bc578063b88d4fde146102d857610121565b806323b872dd116100f457806323b872dd146101c057806342842e0e146101dc57806356189236146101f85780636352211e1461021657806370a082311461024657610121565b806301ffc9a71461012657806306fdde0314610156578063081812fc14610174578063095ea7b3146101a4575b600080fd5b610140600480360381019061013b9190611d23565b6103d2565b60405161014d9190611d6b565b60405180910390f35b61015e6104b4565b60405161016b9190611e1f565b60405180910390f35b61018e60048036038101906101899190611e77565b610546565b60405161019b9190611ee5565b60405180910390f35b6101be60048036038101906101b99190611f2c565b6105cb565b005b6101da60048036038101906101d59190611f6c565b6106e3565b005b6101f660048036038101906101f19190611f6c565b610743565b005b610200610763565b60405161020d9190611fce565b60405180910390f35b610230600480360381019061022b9190611e77565b610774565b60405161023d9190611ee5565b60405180910390f35b610260600480360381019061025b9190611fe9565b610826565b60405161026d9190611fce565b60405180910390f35b61027e6108de565b005b610288610966565b6040516102959190611ee5565b60405180910390f35b6102a6610990565b6040516102b39190611e1f565b60405180910390f35b6102d660048036038101906102d19190612042565b610a22565b005b6102f260048036038101906102ed91906121b7565b610a38565b005b61030e60048036038101906103099190611e77565b610a9a565b60405161031d9392919061223a565b60405180910390f35b610340600480360381019061033b9190611e77565b610abf565b60405161034d9190611e1f565b60405180910390f35b610370600480360381019061036b9190612278565b610ad1565b60405161037d9190611d6b565b60405180910390f35b6103a0600480360381019061039b9190612359565b610b65565b6040516103ad9190611fce565b60405180910390f35b6103d060048036038101906103cb9190611fe9565b610c19565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061049d57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806104ad57506104ac82610d11565b5b9050919050565b6060600080546104c3906123e4565b80601f01602080910402602001604051908101604052809291908181526020018280546104ef906123e4565b801561053c5780601f106105115761010080835404028352916020019161053c565b820191906000526020600020905b81548152906001019060200180831161051f57829003601f168201915b5050505050905090565b600061055182610d7b565b610590576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058790612488565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006105d682610774565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610647576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063e9061251a565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610666610de7565b73ffffffffffffffffffffffffffffffffffffffff16148061069557506106948161068f610de7565b610ad1565b5b6106d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cb906125ac565b60405180910390fd5b6106de8383610def565b505050565b6106f46106ee610de7565b82610ea8565b610733576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072a9061263e565b60405180910390fd5b61073e838383610f86565b505050565b61075e83838360405180602001604052806000815250610a38565b505050565b600061076f60086111ed565b905090565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561081d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610814906126d0565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610897576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088e90612762565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6108e6610de7565b73ffffffffffffffffffffffffffffffffffffffff16610904610966565b73ffffffffffffffffffffffffffffffffffffffff161461095a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610951906127ce565b60405180910390fd5b61096460006111fb565b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606001805461099f906123e4565b80601f01602080910402602001604051908101604052809291908181526020018280546109cb906123e4565b8015610a185780601f106109ed57610100808354040283529160200191610a18565b820191906000526020600020905b8154815290600101906020018083116109fb57829003601f168201915b5050505050905090565b610a34610a2d610de7565b83836112c1565b5050565b610a49610a43610de7565b83610ea8565b610a88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7f9061263e565b60405180910390fd5b610a948484848461142e565b50505050565b600080606083610aa985610774565b610ab286610abf565b9250925092509193909250565b6060610aca8261148a565b9050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000610b6f610de7565b73ffffffffffffffffffffffffffffffffffffffff16610b8d610966565b73ffffffffffffffffffffffffffffffffffffffff1614610be3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bda906127ce565b60405180910390fd5b610bed60086115dc565b6000610bf960086111ed565b9050610c0584826115f2565b610c0f81846117cc565b8091505092915050565b610c21610de7565b73ffffffffffffffffffffffffffffffffffffffff16610c3f610966565b73ffffffffffffffffffffffffffffffffffffffff1614610c95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8c906127ce565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610d05576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cfc90612860565b60405180910390fd5b610d0e816111fb565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610e6283610774565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000610eb382610d7b565b610ef2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee9906128f2565b60405180910390fd5b6000610efd83610774565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610f6c57508373ffffffffffffffffffffffffffffffffffffffff16610f5484610546565b73ffffffffffffffffffffffffffffffffffffffff16145b80610f7d5750610f7c8185610ad1565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610fa682610774565b73ffffffffffffffffffffffffffffffffffffffff1614610ffc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff390612984565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561106c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106390612a16565b60405180910390fd5b611077838383611840565b611082600082610def565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546110d29190612a65565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546111299190612a99565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46111e8838383611845565b505050565b600081600001549050919050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611330576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132790612b3b565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516114219190611d6b565b60405180910390a3505050565b611439848484610f86565b6114458484848461184a565b611484576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147b90612bcd565b60405180910390fd5b50505050565b606061149582610d7b565b6114d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114cb90612c5f565b60405180910390fd5b60006006600084815260200190815260200160002080546114f4906123e4565b80601f0160208091040260200160405190810160405280929190818152602001828054611520906123e4565b801561156d5780601f106115425761010080835404028352916020019161156d565b820191906000526020600020905b81548152906001019060200180831161155057829003601f168201915b50505050509050600061157e6119d2565b90506000815114156115945781925050506115d7565b6000825111156115c95780826040516020016115b1929190612cbb565b604051602081830303815290604052925050506115d7565b6115d2846119e9565b925050505b919050565b6001816000016000828254019250508190555050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611662576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165990612d2b565b60405180910390fd5b61166b81610d7b565b156116ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116a290612d97565b60405180910390fd5b6116b760008383611840565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546117079190612a99565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46117c860008383611845565b5050565b6117d582610d7b565b611814576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180b90612e29565b60405180910390fd5b8060066000848152602001908152602001600020908051906020019061183b929190611c14565b505050565b505050565b505050565b600061186b8473ffffffffffffffffffffffffffffffffffffffff16611a90565b156119c5578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611894610de7565b8786866040518563ffffffff1660e01b81526004016118b69493929190612e9e565b6020604051808303816000875af19250505080156118f257506040513d601f19601f820116820180604052508101906118ef9190612eff565b60015b611975573d8060008114611922576040519150601f19603f3d011682016040523d82523d6000602084013e611927565b606091505b5060008151141561196d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161196490612bcd565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506119ca565b600190505b949350505050565b606060405180602001604052806000815250905090565b60606119f482610d7b565b611a33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a2a90612f9e565b60405180910390fd5b6000611a3d6119d2565b90506000815111611a5d5760405180602001604052806000815250611a88565b80611a6784611ab3565b604051602001611a78929190612cbb565b6040516020818303038152906040525b915050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60606000821415611afb576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611c0f565b600082905060005b60008214611b2d578080611b1690612fbe565b915050600a82611b269190613036565b9150611b03565b60008167ffffffffffffffff811115611b4957611b4861208c565b5b6040519080825280601f01601f191660200182016040528015611b7b5781602001600182028036833780820191505090505b5090505b60008514611c0857600182611b949190612a65565b9150600a85611ba39190613067565b6030611baf9190612a99565b60f81b818381518110611bc557611bc4613098565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611c019190613036565b9450611b7f565b8093505050505b919050565b828054611c20906123e4565b90600052602060002090601f016020900481019282611c425760008555611c89565b82601f10611c5b57805160ff1916838001178555611c89565b82800160010185558215611c89579182015b82811115611c88578251825591602001919060010190611c6d565b5b509050611c969190611c9a565b5090565b5b80821115611cb3576000816000905550600101611c9b565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611d0081611ccb565b8114611d0b57600080fd5b50565b600081359050611d1d81611cf7565b92915050565b600060208284031215611d3957611d38611cc1565b5b6000611d4784828501611d0e565b91505092915050565b60008115159050919050565b611d6581611d50565b82525050565b6000602082019050611d806000830184611d5c565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611dc0578082015181840152602081019050611da5565b83811115611dcf576000848401525b50505050565b6000601f19601f8301169050919050565b6000611df182611d86565b611dfb8185611d91565b9350611e0b818560208601611da2565b611e1481611dd5565b840191505092915050565b60006020820190508181036000830152611e398184611de6565b905092915050565b6000819050919050565b611e5481611e41565b8114611e5f57600080fd5b50565b600081359050611e7181611e4b565b92915050565b600060208284031215611e8d57611e8c611cc1565b5b6000611e9b84828501611e62565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611ecf82611ea4565b9050919050565b611edf81611ec4565b82525050565b6000602082019050611efa6000830184611ed6565b92915050565b611f0981611ec4565b8114611f1457600080fd5b50565b600081359050611f2681611f00565b92915050565b60008060408385031215611f4357611f42611cc1565b5b6000611f5185828601611f17565b9250506020611f6285828601611e62565b9150509250929050565b600080600060608486031215611f8557611f84611cc1565b5b6000611f9386828701611f17565b9350506020611fa486828701611f17565b9250506040611fb586828701611e62565b9150509250925092565b611fc881611e41565b82525050565b6000602082019050611fe36000830184611fbf565b92915050565b600060208284031215611fff57611ffe611cc1565b5b600061200d84828501611f17565b91505092915050565b61201f81611d50565b811461202a57600080fd5b50565b60008135905061203c81612016565b92915050565b6000806040838503121561205957612058611cc1565b5b600061206785828601611f17565b92505060206120788582860161202d565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6120c482611dd5565b810181811067ffffffffffffffff821117156120e3576120e261208c565b5b80604052505050565b60006120f6611cb7565b905061210282826120bb565b919050565b600067ffffffffffffffff8211156121225761212161208c565b5b61212b82611dd5565b9050602081019050919050565b82818337600083830152505050565b600061215a61215584612107565b6120ec565b90508281526020810184848401111561217657612175612087565b5b612181848285612138565b509392505050565b600082601f83011261219e5761219d612082565b5b81356121ae848260208601612147565b91505092915050565b600080600080608085870312156121d1576121d0611cc1565b5b60006121df87828801611f17565b94505060206121f087828801611f17565b935050604061220187828801611e62565b925050606085013567ffffffffffffffff81111561222257612221611cc6565b5b61222e87828801612189565b91505092959194509250565b600060608201905061224f6000830186611fbf565b61225c6020830185611ed6565b818103604083015261226e8184611de6565b9050949350505050565b6000806040838503121561228f5761228e611cc1565b5b600061229d85828601611f17565b92505060206122ae85828601611f17565b9150509250929050565b600067ffffffffffffffff8211156122d3576122d261208c565b5b6122dc82611dd5565b9050602081019050919050565b60006122fc6122f7846122b8565b6120ec565b90508281526020810184848401111561231857612317612087565b5b612323848285612138565b509392505050565b600082601f8301126123405761233f612082565b5b81356123508482602086016122e9565b91505092915050565b600080604083850312156123705761236f611cc1565b5b600061237e85828601611f17565b925050602083013567ffffffffffffffff81111561239f5761239e611cc6565b5b6123ab8582860161232b565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806123fc57607f821691505b602082108114156124105761240f6123b5565b5b50919050565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b6000612472602c83611d91565b915061247d82612416565b604082019050919050565b600060208201905081810360008301526124a181612465565b9050919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612504602183611d91565b915061250f826124a8565b604082019050919050565b60006020820190508181036000830152612533816124f7565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b6000612596603883611d91565b91506125a18261253a565b604082019050919050565b600060208201905081810360008301526125c581612589565b9050919050565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b6000612628603183611d91565b9150612633826125cc565b604082019050919050565b600060208201905081810360008301526126578161261b565b9050919050565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b60006126ba602983611d91565b91506126c58261265e565b604082019050919050565b600060208201905081810360008301526126e9816126ad565b9050919050565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b600061274c602a83611d91565b9150612757826126f0565b604082019050919050565b6000602082019050818103600083015261277b8161273f565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006127b8602083611d91565b91506127c382612782565b602082019050919050565b600060208201905081810360008301526127e7816127ab565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061284a602683611d91565b9150612855826127ee565b604082019050919050565b600060208201905081810360008301526128798161283d565b9050919050565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b60006128dc602c83611d91565b91506128e782612880565b604082019050919050565b6000602082019050818103600083015261290b816128cf565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b600061296e602583611d91565b915061297982612912565b604082019050919050565b6000602082019050818103600083015261299d81612961565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612a00602483611d91565b9150612a0b826129a4565b604082019050919050565b60006020820190508181036000830152612a2f816129f3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612a7082611e41565b9150612a7b83611e41565b925082821015612a8e57612a8d612a36565b5b828203905092915050565b6000612aa482611e41565b9150612aaf83611e41565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612ae457612ae3612a36565b5b828201905092915050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612b25601983611d91565b9150612b3082612aef565b602082019050919050565b60006020820190508181036000830152612b5481612b18565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000612bb7603283611d91565b9150612bc282612b5b565b604082019050919050565b60006020820190508181036000830152612be681612baa565b9050919050565b7f45524337323155524953746f726167653a2055524920717565727920666f722060008201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000602082015250565b6000612c49603183611d91565b9150612c5482612bed565b604082019050919050565b60006020820190508181036000830152612c7881612c3c565b9050919050565b600081905092915050565b6000612c9582611d86565b612c9f8185612c7f565b9350612caf818560208601611da2565b80840191505092915050565b6000612cc78285612c8a565b9150612cd38284612c8a565b91508190509392505050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000612d15602083611d91565b9150612d2082612cdf565b602082019050919050565b60006020820190508181036000830152612d4481612d08565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000612d81601c83611d91565b9150612d8c82612d4b565b602082019050919050565b60006020820190508181036000830152612db081612d74565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000612e13602e83611d91565b9150612e1e82612db7565b604082019050919050565b60006020820190508181036000830152612e4281612e06565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000612e7082612e49565b612e7a8185612e54565b9350612e8a818560208601611da2565b612e9381611dd5565b840191505092915050565b6000608082019050612eb36000830187611ed6565b612ec06020830186611ed6565b612ecd6040830185611fbf565b8181036060830152612edf8184612e65565b905095945050505050565b600081519050612ef981611cf7565b92915050565b600060208284031215612f1557612f14611cc1565b5b6000612f2384828501612eea565b91505092915050565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b6000612f88602f83611d91565b9150612f9382612f2c565b604082019050919050565b60006020820190508181036000830152612fb781612f7b565b9050919050565b6000612fc982611e41565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612ffc57612ffb612a36565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061304182611e41565b915061304c83611e41565b92508261305c5761305b613007565b5b828204905092915050565b600061307282611e41565b915061307d83611e41565b92508261308d5761308c613007565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea26469706673582212204c689a9aa8c8c41aa60198f72d7a35539588859c3949e069deb181c505b2f5d564736f6c634300080a0033",
}

// TracifiedNFTABI is the input ABI used to generate the binding from.
// Deprecated: Use TracifiedNFTMetaData.ABI instead.
var TracifiedNFTABI = TracifiedNFTMetaData.ABI

// TracifiedNFTBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TracifiedNFTMetaData.Bin instead.
var TracifiedNFTBin = TracifiedNFTMetaData.Bin

// DeployTracifiedNFT deploys a new Ethereum contract, binding an instance of TracifiedNFT to it.
func DeployTracifiedNFT(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TracifiedNFT, error) {
	parsed, err := TracifiedNFTMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TracifiedNFTBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TracifiedNFT{TracifiedNFTCaller: TracifiedNFTCaller{contract: contract}, TracifiedNFTTransactor: TracifiedNFTTransactor{contract: contract}, TracifiedNFTFilterer: TracifiedNFTFilterer{contract: contract}}, nil
}

// TracifiedNFT is an auto generated Go binding around an Ethereum contract.
type TracifiedNFT struct {
	TracifiedNFTCaller     // Read-only binding to the contract
	TracifiedNFTTransactor // Write-only binding to the contract
	TracifiedNFTFilterer   // Log filterer for contract events
}

// TracifiedNFTCaller is an auto generated read-only Go binding around an Ethereum contract.
type TracifiedNFTCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TracifiedNFTTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TracifiedNFTTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TracifiedNFTFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TracifiedNFTFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TracifiedNFTSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TracifiedNFTSession struct {
	Contract     *TracifiedNFT     // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TracifiedNFTCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TracifiedNFTCallerSession struct {
	Contract *TracifiedNFTCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts       // Call options to use throughout this session
}

// TracifiedNFTTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TracifiedNFTTransactorSession struct {
	Contract     *TracifiedNFTTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts       // Transaction auth options to use throughout this session
}

// TracifiedNFTRaw is an auto generated low-level Go binding around an Ethereum contract.
type TracifiedNFTRaw struct {
	Contract *TracifiedNFT // Generic contract binding to access the raw methods on
}

// TracifiedNFTCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TracifiedNFTCallerRaw struct {
	Contract *TracifiedNFTCaller // Generic read-only contract binding to access the raw methods on
}

// TracifiedNFTTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TracifiedNFTTransactorRaw struct {
	Contract *TracifiedNFTTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTracifiedNFT creates a new instance of TracifiedNFT, bound to a specific deployed contract.
func NewTracifiedNFT(address common.Address, backend bind.ContractBackend) (*TracifiedNFT, error) {
	contract, err := bindTracifiedNFT(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TracifiedNFT{TracifiedNFTCaller: TracifiedNFTCaller{contract: contract}, TracifiedNFTTransactor: TracifiedNFTTransactor{contract: contract}, TracifiedNFTFilterer: TracifiedNFTFilterer{contract: contract}}, nil
}

// NewTracifiedNFTCaller creates a new read-only instance of TracifiedNFT, bound to a specific deployed contract.
func NewTracifiedNFTCaller(address common.Address, caller bind.ContractCaller) (*TracifiedNFTCaller, error) {
	contract, err := bindTracifiedNFT(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TracifiedNFTCaller{contract: contract}, nil
}

// NewTracifiedNFTTransactor creates a new write-only instance of TracifiedNFT, bound to a specific deployed contract.
func NewTracifiedNFTTransactor(address common.Address, transactor bind.ContractTransactor) (*TracifiedNFTTransactor, error) {
	contract, err := bindTracifiedNFT(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TracifiedNFTTransactor{contract: contract}, nil
}

// NewTracifiedNFTFilterer creates a new log filterer instance of TracifiedNFT, bound to a specific deployed contract.
func NewTracifiedNFTFilterer(address common.Address, filterer bind.ContractFilterer) (*TracifiedNFTFilterer, error) {
	contract, err := bindTracifiedNFT(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TracifiedNFTFilterer{contract: contract}, nil
}

// bindTracifiedNFT binds a generic wrapper to an already deployed contract.
func bindTracifiedNFT(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TracifiedNFTABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TracifiedNFT *TracifiedNFTRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TracifiedNFT.Contract.TracifiedNFTCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TracifiedNFT *TracifiedNFTRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TracifiedNFT.Contract.TracifiedNFTTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TracifiedNFT *TracifiedNFTRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TracifiedNFT.Contract.TracifiedNFTTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TracifiedNFT *TracifiedNFTCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TracifiedNFT.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TracifiedNFT *TracifiedNFTTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TracifiedNFT.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TracifiedNFT *TracifiedNFTTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TracifiedNFT.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_TracifiedNFT *TracifiedNFTCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _TracifiedNFT.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_TracifiedNFT *TracifiedNFTSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _TracifiedNFT.Contract.BalanceOf(&_TracifiedNFT.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_TracifiedNFT *TracifiedNFTCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _TracifiedNFT.Contract.BalanceOf(&_TracifiedNFT.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_TracifiedNFT *TracifiedNFTCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _TracifiedNFT.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_TracifiedNFT *TracifiedNFTSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _TracifiedNFT.Contract.GetApproved(&_TracifiedNFT.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_TracifiedNFT *TracifiedNFTCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _TracifiedNFT.Contract.GetApproved(&_TracifiedNFT.CallOpts, tokenId)
}

// GetCurrentTokenId is a free data retrieval call binding the contract method 0x56189236.
//
// Solidity: function getCurrentTokenId() view returns(uint256)
func (_TracifiedNFT *TracifiedNFTCaller) GetCurrentTokenId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TracifiedNFT.contract.Call(opts, &out, "getCurrentTokenId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCurrentTokenId is a free data retrieval call binding the contract method 0x56189236.
//
// Solidity: function getCurrentTokenId() view returns(uint256)
func (_TracifiedNFT *TracifiedNFTSession) GetCurrentTokenId() (*big.Int, error) {
	return _TracifiedNFT.Contract.GetCurrentTokenId(&_TracifiedNFT.CallOpts)
}

// GetCurrentTokenId is a free data retrieval call binding the contract method 0x56189236.
//
// Solidity: function getCurrentTokenId() view returns(uint256)
func (_TracifiedNFT *TracifiedNFTCallerSession) GetCurrentTokenId() (*big.Int, error) {
	return _TracifiedNFT.Contract.GetCurrentTokenId(&_TracifiedNFT.CallOpts)
}

// GetTokenDetail is a free data retrieval call binding the contract method 0xc0bcc07a.
//
// Solidity: function getTokenDetail(uint256 tokenId) view returns(uint256, address, string)
func (_TracifiedNFT *TracifiedNFTCaller) GetTokenDetail(opts *bind.CallOpts, tokenId *big.Int) (*big.Int, common.Address, string, error) {
	var out []interface{}
	err := _TracifiedNFT.contract.Call(opts, &out, "getTokenDetail", tokenId)

	if err != nil {
		return *new(*big.Int), *new(common.Address), *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	out2 := *abi.ConvertType(out[2], new(string)).(*string)

	return out0, out1, out2, err

}

// GetTokenDetail is a free data retrieval call binding the contract method 0xc0bcc07a.
//
// Solidity: function getTokenDetail(uint256 tokenId) view returns(uint256, address, string)
func (_TracifiedNFT *TracifiedNFTSession) GetTokenDetail(tokenId *big.Int) (*big.Int, common.Address, string, error) {
	return _TracifiedNFT.Contract.GetTokenDetail(&_TracifiedNFT.CallOpts, tokenId)
}

// GetTokenDetail is a free data retrieval call binding the contract method 0xc0bcc07a.
//
// Solidity: function getTokenDetail(uint256 tokenId) view returns(uint256, address, string)
func (_TracifiedNFT *TracifiedNFTCallerSession) GetTokenDetail(tokenId *big.Int) (*big.Int, common.Address, string, error) {
	return _TracifiedNFT.Contract.GetTokenDetail(&_TracifiedNFT.CallOpts, tokenId)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_TracifiedNFT *TracifiedNFTCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _TracifiedNFT.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_TracifiedNFT *TracifiedNFTSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _TracifiedNFT.Contract.IsApprovedForAll(&_TracifiedNFT.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_TracifiedNFT *TracifiedNFTCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _TracifiedNFT.Contract.IsApprovedForAll(&_TracifiedNFT.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_TracifiedNFT *TracifiedNFTCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _TracifiedNFT.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_TracifiedNFT *TracifiedNFTSession) Name() (string, error) {
	return _TracifiedNFT.Contract.Name(&_TracifiedNFT.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_TracifiedNFT *TracifiedNFTCallerSession) Name() (string, error) {
	return _TracifiedNFT.Contract.Name(&_TracifiedNFT.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TracifiedNFT *TracifiedNFTCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TracifiedNFT.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TracifiedNFT *TracifiedNFTSession) Owner() (common.Address, error) {
	return _TracifiedNFT.Contract.Owner(&_TracifiedNFT.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TracifiedNFT *TracifiedNFTCallerSession) Owner() (common.Address, error) {
	return _TracifiedNFT.Contract.Owner(&_TracifiedNFT.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_TracifiedNFT *TracifiedNFTCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _TracifiedNFT.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_TracifiedNFT *TracifiedNFTSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _TracifiedNFT.Contract.OwnerOf(&_TracifiedNFT.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_TracifiedNFT *TracifiedNFTCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _TracifiedNFT.Contract.OwnerOf(&_TracifiedNFT.CallOpts, tokenId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_TracifiedNFT *TracifiedNFTCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _TracifiedNFT.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_TracifiedNFT *TracifiedNFTSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _TracifiedNFT.Contract.SupportsInterface(&_TracifiedNFT.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_TracifiedNFT *TracifiedNFTCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _TracifiedNFT.Contract.SupportsInterface(&_TracifiedNFT.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_TracifiedNFT *TracifiedNFTCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _TracifiedNFT.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_TracifiedNFT *TracifiedNFTSession) Symbol() (string, error) {
	return _TracifiedNFT.Contract.Symbol(&_TracifiedNFT.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_TracifiedNFT *TracifiedNFTCallerSession) Symbol() (string, error) {
	return _TracifiedNFT.Contract.Symbol(&_TracifiedNFT.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_TracifiedNFT *TracifiedNFTCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _TracifiedNFT.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_TracifiedNFT *TracifiedNFTSession) TokenURI(tokenId *big.Int) (string, error) {
	return _TracifiedNFT.Contract.TokenURI(&_TracifiedNFT.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_TracifiedNFT *TracifiedNFTCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _TracifiedNFT.Contract.TokenURI(&_TracifiedNFT.CallOpts, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_TracifiedNFT *TracifiedNFTTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TracifiedNFT.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_TracifiedNFT *TracifiedNFTSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TracifiedNFT.Contract.Approve(&_TracifiedNFT.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_TracifiedNFT *TracifiedNFTTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TracifiedNFT.Contract.Approve(&_TracifiedNFT.TransactOpts, to, tokenId)
}

// MintNFT is a paid mutator transaction binding the contract method 0xeacabe14.
//
// Solidity: function mintNFT(address tokenRecived, string tokenUri) returns(uint256)
func (_TracifiedNFT *TracifiedNFTTransactor) MintNFT(opts *bind.TransactOpts, tokenRecived common.Address, tokenUri string) (*types.Transaction, error) {
	return _TracifiedNFT.contract.Transact(opts, "mintNFT", tokenRecived, tokenUri)
}

// MintNFT is a paid mutator transaction binding the contract method 0xeacabe14.
//
// Solidity: function mintNFT(address tokenRecived, string tokenUri) returns(uint256)
func (_TracifiedNFT *TracifiedNFTSession) MintNFT(tokenRecived common.Address, tokenUri string) (*types.Transaction, error) {
	return _TracifiedNFT.Contract.MintNFT(&_TracifiedNFT.TransactOpts, tokenRecived, tokenUri)
}

// MintNFT is a paid mutator transaction binding the contract method 0xeacabe14.
//
// Solidity: function mintNFT(address tokenRecived, string tokenUri) returns(uint256)
func (_TracifiedNFT *TracifiedNFTTransactorSession) MintNFT(tokenRecived common.Address, tokenUri string) (*types.Transaction, error) {
	return _TracifiedNFT.Contract.MintNFT(&_TracifiedNFT.TransactOpts, tokenRecived, tokenUri)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TracifiedNFT *TracifiedNFTTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TracifiedNFT.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TracifiedNFT *TracifiedNFTSession) RenounceOwnership() (*types.Transaction, error) {
	return _TracifiedNFT.Contract.RenounceOwnership(&_TracifiedNFT.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TracifiedNFT *TracifiedNFTTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _TracifiedNFT.Contract.RenounceOwnership(&_TracifiedNFT.TransactOpts)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_TracifiedNFT *TracifiedNFTTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TracifiedNFT.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_TracifiedNFT *TracifiedNFTSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TracifiedNFT.Contract.SafeTransferFrom(&_TracifiedNFT.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_TracifiedNFT *TracifiedNFTTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TracifiedNFT.Contract.SafeTransferFrom(&_TracifiedNFT.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_TracifiedNFT *TracifiedNFTTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _TracifiedNFT.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_TracifiedNFT *TracifiedNFTSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _TracifiedNFT.Contract.SafeTransferFrom0(&_TracifiedNFT.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_TracifiedNFT *TracifiedNFTTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _TracifiedNFT.Contract.SafeTransferFrom0(&_TracifiedNFT.TransactOpts, from, to, tokenId, _data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_TracifiedNFT *TracifiedNFTTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _TracifiedNFT.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_TracifiedNFT *TracifiedNFTSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _TracifiedNFT.Contract.SetApprovalForAll(&_TracifiedNFT.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_TracifiedNFT *TracifiedNFTTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _TracifiedNFT.Contract.SetApprovalForAll(&_TracifiedNFT.TransactOpts, operator, approved)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_TracifiedNFT *TracifiedNFTTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TracifiedNFT.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_TracifiedNFT *TracifiedNFTSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TracifiedNFT.Contract.TransferFrom(&_TracifiedNFT.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_TracifiedNFT *TracifiedNFTTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _TracifiedNFT.Contract.TransferFrom(&_TracifiedNFT.TransactOpts, from, to, tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TracifiedNFT *TracifiedNFTTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _TracifiedNFT.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TracifiedNFT *TracifiedNFTSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TracifiedNFT.Contract.TransferOwnership(&_TracifiedNFT.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TracifiedNFT *TracifiedNFTTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TracifiedNFT.Contract.TransferOwnership(&_TracifiedNFT.TransactOpts, newOwner)
}

// TracifiedNFTApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the TracifiedNFT contract.
type TracifiedNFTApprovalIterator struct {
	Event *TracifiedNFTApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TracifiedNFTApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TracifiedNFTApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TracifiedNFTApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TracifiedNFTApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TracifiedNFTApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TracifiedNFTApproval represents a Approval event raised by the TracifiedNFT contract.
type TracifiedNFTApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_TracifiedNFT *TracifiedNFTFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*TracifiedNFTApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _TracifiedNFT.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &TracifiedNFTApprovalIterator{contract: _TracifiedNFT.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_TracifiedNFT *TracifiedNFTFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *TracifiedNFTApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _TracifiedNFT.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TracifiedNFTApproval)
				if err := _TracifiedNFT.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_TracifiedNFT *TracifiedNFTFilterer) ParseApproval(log types.Log) (*TracifiedNFTApproval, error) {
	event := new(TracifiedNFTApproval)
	if err := _TracifiedNFT.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TracifiedNFTApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the TracifiedNFT contract.
type TracifiedNFTApprovalForAllIterator struct {
	Event *TracifiedNFTApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TracifiedNFTApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TracifiedNFTApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TracifiedNFTApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TracifiedNFTApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TracifiedNFTApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TracifiedNFTApprovalForAll represents a ApprovalForAll event raised by the TracifiedNFT contract.
type TracifiedNFTApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_TracifiedNFT *TracifiedNFTFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*TracifiedNFTApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _TracifiedNFT.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &TracifiedNFTApprovalForAllIterator{contract: _TracifiedNFT.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_TracifiedNFT *TracifiedNFTFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *TracifiedNFTApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _TracifiedNFT.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TracifiedNFTApprovalForAll)
				if err := _TracifiedNFT.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_TracifiedNFT *TracifiedNFTFilterer) ParseApprovalForAll(log types.Log) (*TracifiedNFTApprovalForAll, error) {
	event := new(TracifiedNFTApprovalForAll)
	if err := _TracifiedNFT.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TracifiedNFTOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the TracifiedNFT contract.
type TracifiedNFTOwnershipTransferredIterator struct {
	Event *TracifiedNFTOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TracifiedNFTOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TracifiedNFTOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TracifiedNFTOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TracifiedNFTOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TracifiedNFTOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TracifiedNFTOwnershipTransferred represents a OwnershipTransferred event raised by the TracifiedNFT contract.
type TracifiedNFTOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TracifiedNFT *TracifiedNFTFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*TracifiedNFTOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TracifiedNFT.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &TracifiedNFTOwnershipTransferredIterator{contract: _TracifiedNFT.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TracifiedNFT *TracifiedNFTFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *TracifiedNFTOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TracifiedNFT.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TracifiedNFTOwnershipTransferred)
				if err := _TracifiedNFT.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TracifiedNFT *TracifiedNFTFilterer) ParseOwnershipTransferred(log types.Log) (*TracifiedNFTOwnershipTransferred, error) {
	event := new(TracifiedNFTOwnershipTransferred)
	if err := _TracifiedNFT.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TracifiedNFTTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the TracifiedNFT contract.
type TracifiedNFTTransferIterator struct {
	Event *TracifiedNFTTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TracifiedNFTTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TracifiedNFTTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TracifiedNFTTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TracifiedNFTTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TracifiedNFTTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TracifiedNFTTransfer represents a Transfer event raised by the TracifiedNFT contract.
type TracifiedNFTTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_TracifiedNFT *TracifiedNFTFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*TracifiedNFTTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _TracifiedNFT.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &TracifiedNFTTransferIterator{contract: _TracifiedNFT.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_TracifiedNFT *TracifiedNFTFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *TracifiedNFTTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _TracifiedNFT.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TracifiedNFTTransfer)
				if err := _TracifiedNFT.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_TracifiedNFT *TracifiedNFTFilterer) ParseTransfer(log types.Log) (*TracifiedNFTTransfer, error) {
	event := new(TracifiedNFTTransfer)
	if err := _TracifiedNFT.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
